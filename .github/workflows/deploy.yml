name: empathy-day

on:
  push:
    branches:
      - develop

env:
  PROJECT_NAME: empathy-day
  BUCKET_NAME: empathy-day-cicd-bucket
  CODE_DEPLOY_APP_NAME: CICDApp
  DEPLOYMENT_GROUP_NAME: CICDapp_deploy

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Copy dev secret
        env:
          DEV_SECRET: ${{ secrets.DEV_SECRET }}
          DEV_SECRET_DIR: src/main/resources
          DEV_SECRET_DIR_FILE_NAME: application-dev.yml
        run: echo $DEV_SECRET | base64 --decode > $DEV_SECRET_DIR/$DEV_SECRET_DIR_FILE_NAME

      - name: Copy aws secret
        env:
          AWS_SECRET: ${{ secrets.AWS_SECRET }}
          AWS_SECRET_DIR: src/main/resources
          AWS_SECRET_DIR_FILE_NAME: application-aws.yml
        run: echo $AWS_SECRET | base64 --decode > $AWS_SECRET_DIR/$AWS_SECRET_DIR_FILE_NAME

      - name: Copy oauth2 secret
        env:
          OAUTH2_SECRET: ${{ secrets.OAUTH2_SECRET }}
          OAUTH2_SECRET_DIR: src/main/resources
          OAUTH2_SECRET_DIR_FILE_NAME: application-oauth2.yml
        run: echo $OAUTH2_SECRET | base64 --decode > $OAUTH2_SECRET_DIR/$OAUTH2_SECRET_DIR_FILE_NAME

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: Build with Gradle
        run: ./gradlew clean build --stacktrace
        shell: bash

      - name: Compress all report files
        if: ${{ failure() }}
        run: |
          echo "Compressing all report files..."
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          mkdir report_files
          REPORT_DIRS=$(find . -type d -path '*/build/reports/tests/test')
          for dir in $REPORT_DIRS; do
            module_path=$(echo $dir | awk -F'/build/' '{print $1}' | cut -c 3-)
            cp -r $dir report_files/$module_path/$(basename $(dirname $dir))
          done
          tar czvf report_files_$TIMESTAMP.tar.gz report_files

      - name: Upload Error Report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: report_files
          path: report_files_*.tar.gz

      - name: Make Zip File
        run: zip -qq -r ./$GITHUB_SHA.zip .
        shell: bash

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.CODE_DEPLOY_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CODE_DEPLOY_SECRET_KEY_ID }}
          aws-region: us-east-2

      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip S3://$BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip

      - name: Code Deploy
        run: aws deploy create-deployment --application-name $CODE_DEPLOY_APP_NAME --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name $DEPLOYMENT_GROUP_NAME --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip